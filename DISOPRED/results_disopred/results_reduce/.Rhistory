col = "red", lwd = 2)
my_rpois_one = function(lambda){
u = runif(1)
x = 0
while (ppois(x, lambda) < u) {
x = x + 1
}
return(x)
}
my_rpois = function(n, lambda){
vec_pois = c()
for (i in 1:n) {
vec_pois[i] = my_rpois_one(lambda = lambda)
}
return(vec_pois)
}
lambda = 0.8
n = 1000
x = my_rpois(n, lambda)
plot(table(x)/n, type = "h")
val_x = seq(from = 0, to = 10)
lines(val_x,dpois(val_x, lambda), type = "p",
col = "red", lwd = 2)
#Réimplémenter fonction discrète quelconque
my_rdiscret_one = function(){
u = runif(1)
discret_law = c(-3,1.3,7,15.2)
discret_prob = c(0.1, 0.4, 0.3, 0.2)
x = 1
while (sum(discret_prob[1:x]) < u) {
x = x + 1
}
return(discret_law[x])
}
my_rdiscret = function(n){
vec_rdiscret = c()
for (i in 1:n) {
vec_rdiscret[i] = my_rdiscret_one()
}
return(vec_rdiscret)
}
n = 10000
x_disc = my_rdiscret(n)
plot(table(x_disc)/n, type = "h")
points(c(-3,1.3,7,15.2),
c(0.1, 0.4, 0.3, 0.2),
col = "red")
# Fonction de densité
my_dlaplace = function(x){
return(1/2*exp(-abs(x)))
}
# Fonction de répartition
my_plaplace = function(x){
return( (1/2) * (1 + sign(x) - sign(x) * exp(-abs(x)) ) )
}
#Fonction quantile
my_qlaplace = function(p){
find_sign = (0.5 - p)
return( sign(find_sign)*log(1-sign(find_sign) +sign(find_sign)* 2*p ) )
}
#Simulation nombre aléatoire dans laplace
my_rlaplace = function(n){
u = runif(n)
return(my_qlaplace(u))
}
x = seq(from = -10, to = 10, length.out = 1000)
y_d = my_dlaplace(x)
y_r = my_plaplace(x)
p = seq(from = 0, to = 1, length.out = 100)
y_q = my_qlaplace(p)
# Plot distrib
plot(x,y_d, type = "l", col = "red")
# Plot répartition
plot(x,y_r, type = "l", col = "red")
# Plot quantile
plot(p,y_q, type = "l", col = "red")
# Hist génération aléatoire
truehist(my_rlaplace(1000))
# Méthode de rejet
n = 10000
m = sqrt(2*exp(1)/pi)
# Vérification que m majore le rapport des fonctions
val_x = seq(from = -10, to = 10, len = 1000)
val_y = dnorm(x)/my_dlaplace(x)
plot(val_x, val_y, type = "l", col = "red")
abline(h = m, lty = 2)
val_x = seq(from= -4, to = 4, len = 1000)
val_y = dnorm(val_x)
plot(val_x, val_y, type = "l", col = "red", ylim = c(0,0.8))
lines(val_x, m*my_dlaplace(val_x), col = "blue")
my_rnorm_rejet = function(n){
m = sqrt(2*exp(1)/pi)
x1 = my_rlaplace(n)
x2 = runif(n)
filtre = which(x2 <= dnorm(x1)/(m*my_dlaplace(x1)))
return(x1[filtre])
}
x = my_rnorm_rejet(n)
truehist(x)
length(x)
lines(val_x, val_y, type = "l", col = "red")
1/m
length(x)/n
rprop = function(from_x){
return(rnorm(1,mean = from_x, sd = 1))
}
dprop = function(to_x, from_x){
return(dnorm(to_x, mean = from_x, sd = 1))
}
my_dtarget = function(x){
return (0.2*dnorm(x,mean = -3,sd = 2) +
0.5*dnorm(x,mean = 0,sd = 1) +
0.2*dnorm(x,mean = 5,sd = 3) )
}
val_x = seq(from = -20, to = 20, len = 1000)
val_y = my_dtarget(val_x)
plot(val_x, val_y, type = "l", col = "red")
my_rtarget = function(n){
x = rep(NA, n)
x[1] = -5
for (i in 1:n) {
yi = rprop(x[i])
p = min(c(1,my_dtarget(yi)/my_dtarget(x[i])*
dprop(x[i],yi)/dprop(yi, x[i]) ))
if(p>1 || p<0){
print("pfozjrpfoerOIPBIUB")
}
u = runif(1)
if(u <= p){
x[i+1] = yi
}else{
x[i+1] = x[i]
}
}
return(x)
}
integrate(my_dtarget, -10, 10)
truehist(my_rtarget(10000))
lines(val_x, val_y, type = "l", col = "red")
# Exercice 4
n = 100 #bactéries
x = 70 #mutants
theta = function(){
return(runif(1, min = 0, max = 1))
}
prior = function(x){
return(dunif(x, min = 0, max = 1))
}
vraisemblance = function(x, n, theta){
return(dbinom(x, n, theta))
}
posterior = function(theta, n, x){
post = dbeta(theta, x+1, n-x+1)
return(post)
}
rprop_theta = function(from_theta){
return(rbeta(1, shape1 = 1/(1-from_theta),
shape2 = 2))
}
dprop_theta = function(to_theta, from_theta){
return(dbeta(to_theta, shape1 = 1/(1-from_theta),
shape2 = 2))
}
val_x = seq(from = 0, to = 1, len = 100)
val_y = posterior(val_x, 100, 70)
plot(val_x, val_y, type = "l", col = "red")
my_rtarget_theta = function(n){
x = rep(NA, n)
x[1] = 0.9
for (i in 1:n) {
yi = rprop_theta(x[i])
p = min(c(1,(posterior(yi, 100, 70)/posterior(x[i], 100, 70))*
(dprop_theta(x[i],yi)/dprop_theta(yi, x[i])) ))
u = runif(1)
if(u <= p){
x[i+1] = yi
}else{
x[i+1] = x[i]
}
}
return(x)
}
val_theta = my_rtarget_theta(100000)
truehist(val_theta)
lines(val_x, val_y, type = "l", col = "red")
IC = 1.96 * sd(val_theta) / sqrt(length(val_theta))
mean(val_theta) + IC
mean(val_theta) - IC
n = 100 #bactéries
x = 70 #mutants
theta = function(){
return(runif(1, min = 0, max = 1))
}
prior = function(x){
return(dunif(x, min = 0, max = 1))
}
vraisemblance = function(x, n, theta){
return(dbinom(x, n, theta))
}
f <- function(x) {dbinom(70, 100, x)*dunif(x)}
p_marginal <- integrate(f, lower=0, upper=1)$value
posterior <- function(x) {
dbinom(70, 100, x)*dunif(x)/p_marginal
}
rprop_theta = function(from_theta){
return(rbeta(1, shape1 = 1/(1-from_theta),
shape2 = 2))
}
dprop_theta = function(to_theta, from_theta){
return(dbeta(to_theta, shape1 = 1/(1-from_theta),
shape2 = 2))
}
val_x = seq(from = 0, to = 1, len = 100)
val_y = posterior(val_x)
plot(val_x, val_y, type = "l", col = "red")
my_rtarget_theta = function(n){
x = rep(NA, n)
x[1] = 0.9
for (i in 1:n) {
yi = rprop_theta(x[i])
p = min(c(1,(posterior(yi)/posterior(x[i]))*
(dprop_theta(x[i],yi)/dprop_theta(yi, x[i])) ))
u = runif(1)
if(u <= p){
x[i+1] = yi
}else{
x[i+1] = x[i]
}
}
return(x)
}
val_theta = my_rtarget_theta(100000)
truehist(val_theta)
lines(val_x, val_y, type = "l", col = "red")
IC = 1.96 * sd(val_theta) / sqrt(length(val_theta))
mean(val_theta) + IC
mean(val_theta) - IC
# Exercice 4 partie 2
x = 70
n = 100
nb_obs = 1000000
i = 1
vec_theta_s = c()
for (obs in 1:nb_obs) {
theta_s = runif(1, min = 0, max = 1)
x_s = rbinom(1, 100, theta_s)
if(x_s == x){
vec_theta_s[i] = theta_s
i= i+1
}
}
truehist(vec_theta_s)
lines(val_x, val_y, type = "l", col = "red")
IC = 1.96 * sd(vec_theta_s) / sqrt(length(vec_theta_s))
mean(vec_theta_s) + IC
mean(vec_theta_s) - IC
# Partie 3
# Partie 3
setwd("~/Documents/M2_BI/Projet_long/results_psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-which(list_pred == "all_prot.horiz"),]
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
len_str = str_length(df_seq[row_df, 1])
if (len_str > 6) {
df_seq[row_df, 1] = str_c(str_sub(df_seq[row_df, 1], 1, 6), "-",
str_sub(df_seq[row_df, 1], 7, len_str))
}
row_df = row_df + 1
}
setwd("../../CLUSTAL/results_clustal/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
seq_tmp = ""
}else{
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
}
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
df_align = as.data.frame(df_align[-1,])
df_seq$align_pred = NA
for (name in df_align$V1) {
ind = which(df_align$V1 == name)
if (length(ind) != 0) {
align_tmp = df_align$V2[ind]
align_tmp = str_split(align_tmp, "")[[1]]
posgap = which(align_tmp == "-")
posaa = which(align_tmp != "-")
apred = str_split(df_seq$pred[which(df_seq$name == name)], "")[[1]]
apregap = c()
apregap[posgap] = "-"
apregap[posaa] = apred
apregap_col = ""
for (i in 1:length(apregap)) {
apregap_col = str_c(apregap_col, apregap[i])
}
df_seq$align_pred[which(df_seq$name == name)] = apregap_col
}
}
remove(apregap)
remove(apregap_col)
df_seq$C = NA
df_seq$E = NA
df_seq$H = NA
for (rg_row in 1:nrow(df_seq)) {
df_seq$C[rg_row] = str_count(df_seq$pred[rg_row], "C")
df_seq$H[rg_row] = str_count(df_seq$pred[rg_row], "H")
df_seq$E[rg_row] = str_count(df_seq$pred[rg_row], "E")
}
df_seq$pvalue = 0
df_seq$match = 0
df_seq$mismatch = 0
df_seq$prop_match = 0
prot_ref = df_seq[1,]
for (rg_row in 2:nrow(df_seq)) {
if (str_detect(df_seq$name[rg_row], prot_ref$name)) {
if (!is.na(df_seq$align_pred[rg_row])) {
vec_ref = str_split(prot_ref$align_pred, "")[[1]]
vec_alg = str_split(df_seq$align_pred[rg_row], "")[[1]]
#match mismatch
for (rg in 1:length(vec_ref)) {
if (vec_ref[rg] == vec_alg[rg]) {
df_seq$match[rg_row] = df_seq$match[rg_row] + 1
}else if (vec_alg[rg] != "-") {
df_seq$mismatch[rg_row] = df_seq$mismatch[rg_row] + 1
}
}
df_seq$prop_match = df_seq$match/(df_seq$match+df_seq$mismatch)
#pvalue proportions
df_seq$pvalue[rg_row] = chisq.test(rbind(prot_ref[,5:7], df_seq[rg_row,5:7]))$p.value
}
}else{
prot_ref = df_seq[rg_row,]
}
}
#Résumé stats
summary(df_seq$prop_match)
length(which(df_seq$pvalue < 0.05 & df_seq$pvalue!=0))/length(which(df_seq$pvalue!=0))
df_seq$name[which(df_seq$prop_match < 0.7)]
#setwd("~/Documents/Projet_long/DISOPRED/results_disopred/results_reduce/")
setwd("~/Documents/M2_BI/Projet_long/DISOPRED/results_disopred/results_reduce/")
library(plyr)
library(stringr)
require(MASS)
list_files = as.vector(read.table("list_files_diso.txt")[,1])
#Liste des data frame de protéines avec un data frame par protéine + isoformes
list_diso_result = list()
list_chi2_diso = list()
cpt = 1
cpt_iso = 1
list_diso_result[[cpt]] = read.table(list_files[cpt], skip = 3)
list_diso_result[[cpt]] = data.frame(list_diso_result[[cpt]],
iso = rep(cpt_iso, nrow(list_diso_result[[cpt]])),
name = rep(str_c(str_sub(list_files[1],1, 6), "-", cpt_iso),
nrow(list_diso_result[[cpt]]) ))
list_chi2_diso[[cpt]] = data.frame(c(length(which(list_diso_result[[cpt]]$V3 == "." )),
length(which(list_diso_result[[cpt]]$V3 == "*" ))))
cpt_iso = cpt_iso + 1
name_prot = str_sub(list_files[1],1, 6)
for (file in list_files[2:length(list_files)]) {
if (str_sub(file,1, 6) == name_prot) {
df_tmp = read.table(file, skip = 3)
df_tmp = data.frame(df_tmp,
iso = rep(cpt_iso, nrow(df_tmp)),
name = rep(str_c(str_sub(file,1, 6), "-", cpt),
nrow(df_tmp) ) )
cpt_iso = cpt_iso + 1
list_diso_result[[cpt]] = rbind(list_diso_result[[cpt]], df_tmp)
vec_tmp = c(length(which(df_tmp$V3 == "." )),
length(which(df_tmp$V3 == "*" )))
list_chi2_diso[[cpt]] = cbind(list_chi2_diso[[cpt]], vec_tmp)
}else{
cpt = cpt + 1
cpt_iso = 1
list_diso_result[[cpt]] = read.table(file, skip = 3)
list_diso_result[[cpt]] = data.frame(list_diso_result[[cpt]],
iso = rep(cpt_iso,nrow(list_diso_result[[cpt]])),
name = rep(str_c(str_sub(file,1, 6), "-", cpt_iso),
nrow(list_diso_result[[cpt]]) ) )
list_chi2_diso[[cpt]] = data.frame(c(length(which(list_diso_result[[cpt]]$V3 == "." )),
length(which(list_diso_result[[cpt]]$V3 == "*" ))))
name_prot = str_sub(file,1, 6)
}
}
list_pvalue = list()
for (rg_list in c(1:length(list_chi2_diso))) {
table_tmp = list_chi2_diso[[rg_list]]
vec_tmp = c(1)
if (ncol(table_tmp) > 1) {
for (table_col in 2:ncol(table_tmp)) {
vec_tmp[table_col] = chisq.test(table_tmp[,c(1,table_col)])$p.value
}
}else{
vec_tmp = c(1)
}
list_pvalue[[rg_list]] = vec_tmp
# list_pvalue[[rg_list]]
# vec_pvalue[rg_list] = chisq.test(list_chi2_diso[[rg_list]])$p.value
}
vec_prop_chi2 = c()
for (rg_list in 1:length(list_pvalue)) {
prop_tot = 0
prop_sig = 0
vec_tmp = list_pvalue[[rg_list]]
for (rg_vec in 1:length(vec_tmp)) {
if (!is.nan(vec_tmp[rg_vec]) & vec_tmp[rg_vec] < 0.05) {
prop_sig = prop_sig + 1
prop_tot = prop_tot + 1
}else if( !is.nan(vec_tmp[rg_vec]) ){
prop_tot = prop_tot + 1
}
}
vec_prop_chi2[rg_list] = prop_sig/prop_tot
}
summary(vec_prop_chi2)
df_seq$name[which(df_seq$prop_match < 0.7)]
View(df_seq)
df_tmp = read.table(list_files[cpt], skip = 3)
View(df_tmp)
df_tmp$V3
seq_tmp = ""
df_tmp = read.table(list_files[cpt], skip = 3)
seq_tmp = ""
for (i in 1:length(df_tmp$V3)) {
seq_tmp = str_c(seq_tmp, df_tmp$V3[i])
}
seq_tmp
df_tmp$V1
list_files[cpt]
list_files
for (file in list_files) {
str_sub(file, 1, 6)
}
str_sub(file, 1, 6)
list_files
str_split(file, ".")
file
str_split(file, ".")
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
str_split(fruits, " and ", simplify = TRUE)
str_split(file, ".d")
file = str_split(file, ".d")[[1]][1]
str_sub(file, 1, 6)
file
length(file) > 6
str_length(file) > 6
str_c(str_sub(file, 1, 6), "-", str_sub(file, 7, str_length(file)))
name = "2"
df_seq$diso[which(df_seq$name == name)]
df_seq$diso[which(df_seq$name == name)] = seq_tmp
which(df_seq$name == name)
length(which(df_seq$name == name))
seq_tmp
seq_tmp[1]
df_seq$diso = NA
for (file in list_files) {
df_tmp = read.table(file, skip = 3)
file = str_split(file, ".d")[[1]][1]
if (str_length(file) > 6) {
name = str_c(str_sub(file, 1, 6), "-", str_sub(file, 7, str_length(file)))
}else{
name = str_sub(file, 1, 6)
}
if (length(which(df_seq$name == name)) !=0) {
seq_tmp = ""
for (i in 1:length(df_tmp$V3)) {
seq_tmp = str_c(seq_tmp, df_tmp$V3[i])
}
df_seq$diso[which(df_seq$name == name)] = seq_tmp[1]
}
}
remove(df_tmp)
remove(seq_tmp)
