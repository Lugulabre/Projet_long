seq_combi = as.data.frame.vector(t(seq_combi))
typeof(seq_combi)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combi))
typeof(seq_combi)
View(seq_combi)
test = seq_combi[[1]]
typeof(test)
typeof(as.vector(test))
str_detect(test, "50-")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(test, "^50-")
which(str_detect(test, "^50-"))
test[which(str_detect(test, "^50-"))]
seq_ne_ini = seq(50,50,2)
seq_ne_ini
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 10000, 20)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combi))[[1]]
seq_combi
setwd("../new_methis_pop_increase_50000_snp/")
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 10000, 20)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
for (ne_ini in seq_ne_ini) {
dir_ne = str_c("Ne", ne_ini, "-XXX")
setwd(dir_ne)
motif_detect = str_c("^",ne_ini,"-")
vec_ne_tmp = seq_combi[which(str_detect(seq_combi, motif_detect))]
mat_tmp = data.frame.stat(seq_ne = vec_ne_tmp, max_gen = 101, max_simu = 1)
if (ne_ini == seq_ne_ini[1]) {
mat_pop_inc = mat_tmp
}else{
mat_pop_inc = rbind(mat_pop_inc, mat_tmp)
}
setwd("../")
}
setwd("../new_methis_pop_increase_50000_snp/")
dir_ne
dir_ne = str_c("Ne", ne_ini, "-XXX/")
setwd(dir_ne)
getwd()
setwd("../new_methis_pop_increase_50000_snp/")
getwd()
setwd("../new_methis_pop_increase_50000_snp/")
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 10000, 20)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combi))[[1]]
for (ne_ini in seq_ne_ini) {
dir_ne = str_c("Ne", ne_ini, "-XXX/")
setwd(dir_ne)
motif_detect = str_c("^",ne_ini,"-")
vec_ne_tmp = seq_combi[which(str_detect(seq_combi, motif_detect))]
mat_tmp = data.frame.stat(seq_ne = vec_ne_tmp, max_gen = 101, max_simu = 1)
if (ne_ini == seq_ne_ini[1]) {
mat_pop_inc = mat_tmp
}else{
mat_pop_inc = rbind(mat_pop_inc, mat_tmp)
}
setwd("../")
}
setwd("../new_methis_pop_increase_50000_snp/")
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 2400, 20)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combi))[[1]]
for (ne_ini in seq_ne_ini) {
dir_ne = str_c("Ne", ne_ini, "-XXX/")
setwd(dir_ne)
motif_detect = str_c("^",ne_ini,"-")
vec_ne_tmp = seq_combi[which(str_detect(seq_combi, motif_detect))]
mat_tmp = data.frame.stat(seq_ne = vec_ne_tmp, max_gen = 101, max_simu = 1)
if (ne_ini == seq_ne_ini[1]) {
mat_pop_inc = mat_tmp
}else{
mat_pop_inc = rbind(mat_pop_inc, mat_tmp)
}
setwd("../")
}
View(mat_pop_inc)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne, show.legend = FALSE)) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1)+ geom_line()
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1)+ geom_smooth()
}
print(p)
}
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne, show.legend = FALSE)) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1)+ geom_line()
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1)+ geom_smooth()
}
print(p)
}
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne), show.legend = FALSE) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1)+ geom_line()
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1)+ geom_smooth()
}
print(p)
}
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales"
, TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne), show.legend = FALSE) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1)+ geom_line()
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1)+ geom_smooth()
}
p + theme(legend.position = "none")
print(p)
}
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales"
, TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne)) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1, show.legend = FALSE)+ geom_line(show.legend = FALSE)
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1, show.legend = FALSE)+ geom_smooth(show.legend = FALSE)
}
p + theme(legend.position = "none")
print(p)
}
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales"
, TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales"
, TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.adm.props, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.adm.props, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.het.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$Fst.s1.adm, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$mean.adm.props, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$Fst.s1.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$mean.het.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#plot_stat_gen(mat_64_8192, mat_64_8192$gen,
#              mat_64_8192$mean.adm.props, mat_64_8192$Ne,
#              "Stat en fonction des générations\n selon différentes Ne initiales", #TRUE)
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$Fst.s1.adm, mat_1024_16384$simu,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$mean.adm.props, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$Fst.s1.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$mean.het.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#plot_stat_gen(mat_64_8192, mat_64_8192$gen,
#              mat_64_8192$mean.adm.props, mat_64_8192$Ne,
#              "Stat en fonction des générations\n selon différentes Ne initiales", #TRUE)
#Plot function
#Affichage d'une stat au cours des générations
plot_stat_gen = function(df, gen, stat, Ne, titre, ligne = FALSE, legd = TRUE){
p = ggplot(df, aes(x = gen, y = stat, color = Ne)) + ggtitle(titre)
if (ligne) {
p = p + geom_point(size = 0.1, show.legend = legd)+ geom_line(show.legend = legd)
}else{
#smooth de la courbe pour obtenir régression et tempérer variabilité due au TCL
p = p + geom_point(size = 0.1, show.legend = legd)+ geom_smooth(show.legend = legd)
}
print(p)
}
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$Fst.s1.adm, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
TRUE)
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$mean.adm.props, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$Fst.s1.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$mean.het.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#plot_stat_gen(mat_64_8192, mat_64_8192$gen,
#              mat_64_8192$mean.adm.props, mat_64_8192$Ne,
#              "Stat en fonction des générations\n selon différentes Ne initiales", #TRUE)
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$Fst.s1.adm, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384, mat_1024_16384$Generation,
mat_1024_16384$mean.adm.props, mat_1024_16384$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$Fst.s1.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
plot_stat_gen(mat_1024_16384_mean, mat_1024_16384_mean$Generation,
mat_1024_16384_mean$mean.het.adm, mat_1024_16384_mean$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales")
#plot_stat_gen(mat_64_8192, mat_64_8192$gen,
#              mat_64_8192$mean.adm.props, mat_64_8192$Ne,
#              "Stat en fonction des générations\n selon différentes Ne initiales", #TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$Fst.s1.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = FALSE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.het.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = FALSE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$f3, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = FALSE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.het.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = FALSE)
setwd("../new_methis_pop_increase_50000_snp/")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/git_repository/Stage/Simulations/new_methis_pop_size_diff_50000_snp/")
setwd("../new_methis_pop_increase_50000_snp/")
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 2400, 200)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combFALSEi))[[1]]
setwd("../new_methis_pop_increase_50000_snp/")
seq_ne_ini = seq(50,50,2)
seq_ne_fin = seq(100, 2400, 200)
seq_combi = as.data.frame(outer(seq_ne_ini, seq_ne_fin, FUN="paste", sep="-"))
seq_combi = as.data.frame.vector(unlist(seq_combi))[[1]]
for (ne_ini in seq_ne_ini) {
dir_ne = str_c("Ne", ne_ini, "-XXX/")
setwd(dir_ne)
motif_detect = str_c("^",ne_ini,"-")
vec_ne_tmp = seq_combi[which(str_detect(seq_combi, motif_detect))]
mat_tmp = data.frame.stat(seq_ne = vec_ne_tmp, max_gen = 101, max_simu = 1)
if (ne_ini == seq_ne_ini[1]) {
mat_pop_inc = mat_tmp
}else{
mat_pop_inc = rbind(mat_pop_inc, mat_tmp)
}
setwd("../")
}
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$f3, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = TRUE)
plot_stat_gen(mat_pop_inc, mat_pop_inc$Generation,
mat_pop_inc$mean.het.adm, mat_pop_inc$Ne,
"Stat en fonction des générations\n selon différentes Ne initiales",
legd = TRUE)
>>>>>>> ab2148229d5189fa86a8d1ff2df1d2ef6bf64f1e
setwd("~/Projet_long/psipred/results_reduce/")
getwd()
setwd("~/Projet_long/psipred/results_reduce/")
setwd("~/Documents/M2_BI/Projet_long/psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-which(list_pred == "all_prot.horiz"),]
setwd("~/Documents/M2_BI/Projet_long/results_psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-which(list_pred == "all_prot.horiz"),]
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
View(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
row_df = row_df + 1
}
View(df_seq)
setwd("../../CLUSTAL/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
setwd("../../CLUSTAL/results_clustal/results_clustal_data_reduce/")
setwd("~/Documents/M2_BI/Projet_long/results_psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-which(list_pred == "all_prot.horiz"),]
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
row_df = row_df + 1
}
setwd("../../CLUSTAL/results_clustal/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
seq_tmp = ""
}else{
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
}
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
View(df_align)
df_align = as.data.frame(df_align[-1,])
View(df_align)
df_seq$name[1]
str_count(df_seq$name[1])
str_count(df_seq$name[2])
str_length(df_seq[row_df, 1]
)
df_seq[row_df, 1]
str_length(df_seq$name[1])
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
len_str = str_length(df_seq[row_df, 1])
if (len_str > 6) {
df_seq[row_df, 1] = str_c(str_sub(df_seq[row_df, 1], 1, 6), "-",
str_sub(df_seq[row_df, 1], 7, len_str))
}
row_df = row_df + 1
}
setwd("~/Documents/M2_BI/Projet_long/results_psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-which(list_pred == "all_prot.horiz"),]
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
len_str = str_length(df_seq[row_df, 1])
if (len_str > 6) {
df_seq[row_df, 1] = str_c(str_sub(df_seq[row_df, 1], 1, 6), "-",
str_sub(df_seq[row_df, 1], 7, len_str))
}
row_df = row_df + 1
}
View(df_seq)
View(df_align)
#P27482 en trop
df_align$V2[2]
#P27482 en trop
str_detect(df_align$V2[2], "-")
#P27482 en trop
str_detect(df_align$V2[2], "M")
#P27482 en trop
str_locate_all(df_align$V2[2], "-")
#P27482 en trop
str_locate(df_align$V2[2], "-")
#P27482 en trop
str_locate(df_align$V2[2], "-*-")
#P27482 en trop
str_locate_all(df_align$V2[2], "-*-")
#P27482 en trop
str_locate_all(df_align$V2[2], "-*")
#P27482 en trop
str_locate_all(df_align$V2[2], "-")
