# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Histogramme des valeurs theta dans la loi conjointe\n en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
x2 = c(67:73) # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Valeurs theta dans la loi conjointe\n en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
IC2 = 1.96 * sd(vec_theta_s2) / sqrt(length(vec_theta_s2))
m_conj_IC_1_bis = mean(vec_theta_s2) - IC2
m_conj_IC_2_bis = mean(vec_theta_s2) + IC2
m_conj_IC_1
m_conj_IC_2
m_conj_IC_1_bis
m_conj_IC_2_bis
q025_IC = quantile(val_theta, 0.025, names = FALSE)
q075_IC = quantile(val_theta, 0.975, names = FALSE)
q025_IC
q075_IC
q025_conj_bis = quantile(vec_theta_s2, 0.025, names = FALSE)
q075_conj_bis = quantile(vec_theta_s2, 0.975, names = FALSE)
q075_conj_bis
q025_conj_bis
q025_conj
q025_conj = quantile(vec_theta_s, 0.025, names = FALSE)
q075_conj = quantile(vec_theta_s, 0.975, names = FALSE)
q025_conj
q075_conj
ab = c(1:100)
plot(ab, val_theta[100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:100)
plot(ab, val_theta[1:100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:1000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:10000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
BiocManager::install("mixOmics")
BiocManager::install("timeOmics")
install.packages("tidyverse")
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
install.packages("dplyr")
install.packages("pheatmap")
#library("tidyverse")
library("mixOmics")
licence()
#library("tidyverse")
library("mixOmics")
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list = read.table("list_file.txt",  stringsAsFactors = FALSE)
list = list[-96,]
#################################################
#Création data frame concaténation séquences
mat_seq = matrix(data = NA, nrow = 95, ncol = 3)
mat_seq = as.data.frame(mat_seq)
colnames(mat_seq) = c("name", "pred", "aa")
row_mat = 1
for (name_prot in list) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
mat_seq[row_mat, 3] = seq_aa
mat_seq[row_mat, 2] = seq_pred
mat_seq[row_mat, 1] = str_split(name_prot, ".h")[[1]][1]
row_mat = row_mat + 1
}
#Fin création dataframe
#################################################
setwd("../../CLUSTAL/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
a = read.table("Q9Y232.fasta", sep = "\n")
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
View(list_clust)
list_clust = list_clust[,1]
tmp == ""
tmp = ""
tmp == ""
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
if(tmp != ""){
stock = tmp
tmp = ""
}
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
stock
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
if(tmp != ""){
stock = tmp
print(stock)
tmp = ""
}
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
a = read.table("Q9Y232.fasta", sep = "\n")
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
if(tmp != ""){
stock = tmp
print(c(stock_seq, stock))
tmp = ""
}else{
stock_seq = a[i,]
}
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
if(tmp != ""){
stock = tmp
print(c(stock_seq, stock))
tmp = ""
}else{
stock_seq = as.character(a[i,])
}
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
print(c(stock_seq, stock))
a
stock
tmp = ""
for (i in c(1:nrow(a))) {
if(str_detect(a[i,], ">")  ){
if(tmp != ""){
stock = tmp
print(c(stock_seq, stock))
stock_seq = as.character(a[i,])
tmp = ""
}else{
stock_seq = as.character(a[i,])
}
print("yes")
}else{
tmp = str_c(tmp, a[i,])
}
}
View(a)
print(c(stock_seq, stock))
print(c(stock_seq, tmp))
c(stock_seq, stock)
cbind(df_align, c(stock_seq, stock))
df_align = c("1st col", "2nd col")
cbind(df_align, c(stock_seq, stock))
rbind(df_align, c(stock_seq, stock))
a = rbind(df_align, c(stock_seq, stock))
View(a)
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-96,]
#################################################
#Création data frame concaténation séquences
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
row_df = row_df + 1
}
setwd("../../CLUSTAL/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = as.character(filin[n_line,])
seq_tmp = ""
}else{
title_tmp = as.character(filin[n_line,])
}
print("yes")
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = as.character(filin[n_line,])
seq_tmp = ""
}else{
title_tmp = as.character(filin[n_line,])
}
print("yes")
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
View(df_align)
View(df_seq)
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
getwd()
setwd(dir = "../../../../../../")
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
setwd("../")
getwd()
setwd("Users/MAEL/")
setwd("Documents/M2_BI/Projet_long/psipred/results_reduce/")
library(stringr)
require(MASS)
#Liste des noms de fichiers avec prédiction ss
list_pred = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_pred = list_pred[-96,]
df_seq = matrix(data = NA, nrow = 95, ncol = 3)
df_seq = as.data.frame(df_seq)
colnames(df_seq) = c("name", "pred", "aa")
row_df = 1
for (name_prot in list_pred) {
tmp = read.table(name_prot, sep = "\n",
stringsAsFactors = FALSE)
num_pred = seq(from = 2, to = nrow(tmp), by = 4)
seq_pred = ""
for (i in num_pred) {
seq_pred = str_c(seq_pred, str_remove(tmp[i,][1], "Pred: "))
}
num_aa = seq(from = 3, to = nrow(tmp), by = 4)
seq_aa = ""
for (i in num_aa) {
seq_aa = str_c(seq_aa, str_remove(tmp[i,][1], "  AA: "))
}
df_seq[row_df, 3] = seq_aa
df_seq[row_df, 2] = seq_pred
df_seq[row_df, 1] = str_split(name_prot, ".h")[[1]][1]
row_df = row_df + 1
}
setwd("../../CLUSTAL/results_clustal_data_reduce/")
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = as.character(filin[n_line,])
seq_tmp = ""
}else{
title_tmp = as.character(filin[n_line,])
}
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
a = read.table("Q9Y232.fasta", sep = "\n")
a[1,]
a[1,][4:10]
str_extract(a[1,], "|*|")
str_extract(a[1,], "|\*|")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
str_extract(a[1,], "[|]{1,6}")
a[1,]
str_extract(as.character(a[1,]), "[|]{1,6}")
as.character(a[1,])
str_extract(as.character(a[1,]), "[|+|]{1,6}")
str_extract(as.character(a[1,]), "[a-z]{1,6}")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(as.character(a[1,]), "[a-z]{6}")
str_extract(as.character(a[1,]), "[|]{6}")
str_extract(as.character(a[1,]), "[|+|]{6}")
df_align = as.data.frame(df_align)
View(df_seq)
View(df_align)
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = as.character(filin[n_line,])
seq_tmp = ""
}else{
title_tmp = as.character(filin[n_line,])
}
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
df_align = as.data.frame(df_align[-1,])
View(df_align)
df_align[1,1]
as.character(df_align[1,1])
title_tmp
df_align[1,1]
df_align[1,1][0]
df_align[1,1][1]
df_align[1,1][2]
as.character(df_align[1,1])
substr(df_align[1,1], 4, 10)
substr(df_align[1,1], 5, 10)
substr(df_align[1,1], 5, 12)
substr(df_align[1,1], 5, 11)
substr(df_align[1,1], 5, 10)
substr(df_align[1,1], 5, 14)
substr(df_align[4,1], 5, 14)
substr(df_align[10,1], 5, 14)
substr(df_align[10,1], 5, 13)
patt = "|.*|"
regexpr(patt, df_align[1,1])
regexpr(patt, as.character(df_align[1,1]))
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "H.*8"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "|.*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "\|.*\|"
m = regexpr(patt, as.character(df_align[1,1]))
patt = "\.*|"
patt = "\\|.*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "\|.*|"
patt = "||.*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp|.*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp|.*"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp.*"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp.*|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp.*"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp."
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "sp*."
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "{|}.*{|}"
m = regexpr(patt, as.character(df_align[1,1]))
str_split(df_align[1,1], "|")
df_align[1,1]
str_split(df_align[1,1], "\\|")
patt = "\\|.*\\|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
patt = "\\|.*\\|"
m = regexpr(patt, as.character(df_align[1,1]))
regmatches(df_align[1,1], m)
str_split(df_align[1,1], "\\|")
str_split(df_align[1,1], "\\|")[[1]][2]
as.character(filin[n_line,])
#Liste des noms de fichiers résultats clustal
list_clust = read.table("list_file.txt",  stringsAsFactors = FALSE)
list_clust = list_clust[,1]
df_align = c("1st col", "2nd col")
for (filename in list_clust) {
filin = read.table(filename, sep = "\n")
seq_tmp = ""
for (n_line in c(1:nrow(filin))) {
if(str_detect(filin[n_line,], ">")  ){
if(seq_tmp != ""){
df_align = rbind(df_align, c(title_tmp, seq_tmp))
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
seq_tmp = ""
}else{
title_tmp = str_split(as.character(filin[n_line,]),"\\|")[[1]][2]
}
}else{
seq_tmp = str_c(seq_tmp, filin[n_line,])
}
}
df_align = rbind(df_align, c(title_tmp, seq_tmp))
}
df_align = as.data.frame(df_align[-1,])
View(df_align)
View(df_seq)
